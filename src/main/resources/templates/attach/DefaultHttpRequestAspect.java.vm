package com.wei.${moduleName}.filter;

import com.google.common.collect.Maps;
import com.wei.client.base.CommonCode;
import com.wei.client.base.CommonResult;
import com.wei.common.annotaion.Validate;
import com.wei.common.annotaion.ValidateType;
import com.wei.common.util.HttpClientUtil;
import com.wei.common.util.SessionUtil;
import com.wei.passport.client.define.PassportHostDef;
import com.wei.passport.client.value.ValidateVO;
import com.wei.service.configure.EnvironmentDefine;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.MDC;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * @author wangqiaobin
 * @date 2016/12/10
 */
@Slf4j
@Aspect
@Configuration
public class DefaultHttpRequestAspect {

    @Resource
    private EnvironmentDefine environmentDefine;

    @Pointcut("@annotation(com.wei.common.annotaion.Validate)")
    public void pointcut() {
    }

    @Around("pointcut()")
    public Object interceptor(ProceedingJoinPoint point) throws Throwable {
        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();
        ServletRequestAttributes attributes = (ServletRequestAttributes) requestAttributes;
        HttpServletRequest request = attributes.getRequest();
        MethodSignature signature = (MethodSignature) point.getSignature();
        //获取被拦截的方法
        Method method = signature.getMethod();
        ValidateVO validate = remoteValidate(request);
        Validate annotation = method.getAnnotation(Validate.class);
        boolean validated = true;
        if (annotation != null && annotation.action().equals(ValidateType.DEFAULT)) {
            //默认校验规则
            validated = Objects.nonNull(validate) && !validate.getIsEmployer();
        }
        if (annotation != null && annotation.action().equals(ValidateType.EMPLOYER)) {
            //员工接口校验规则
            validated = Objects.nonNull(validate) && validate.getIsEmployer();
        }
        if (annotation != null && annotation.action().equals(ValidateType.SIGN)) {
            //签名校验
        }
        if (validated) {
            if (validate != null) {
                //官网需要填充省市信息，其他的暂时不需要
                SessionUtil.setRequestContext(null, null, validate.getUserId(), validate.getUserType(), validate.getUserPermit(), validate.getIsAdmin());
            }
        }
        if (annotation != null && !validated && !annotation.action().equals(ValidateType.MISS)) {
            CommonResult<Object> result = CommonResult.errorReturn(CommonCode.LOGIN_ERROR);
            result.setTraceId(MDC.get("traceId"));
            return result;
        }
        //执行下一步
        Object proceed = point.proceed();
        if (proceed != null && proceed.getClass().isAssignableFrom(CommonResult.class)) {
            ((CommonResult) proceed).setTraceId(MDC.get("traceId"));
        }
        return proceed;
    }

    private ValidateVO remoteValidate(HttpServletRequest request) {
        List<String> host;
        if (environmentDefine.isProd()) {
            host = PassportHostDef.prodHost;
        } else if (environmentDefine.isPre()) {
            host = PassportHostDef.predHost;
        } else {
            host = PassportHostDef.testHost;
        }
        Map<String, String> header = Maps.newHashMap();
        if (request.getCookies() != null) {
            String value = "";
            for (Cookie cookie : request.getCookies()) {
                value += cookie.getName() + "=" + cookie.getValue() + ";";
            }
            header.put("Cookie", value);
        }
        CommonResult<ValidateVO> post = HttpClientUtil.post(host, "/passport/validate", "", header, ValidateVO.class);
        return post.getResult();
    }
}